package com.mvp.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT_MESS".
*/
public class ProductMessDao extends AbstractDao<ProductMess, Long> {

    public static final String TABLENAME = "PRODUCT_MESS";

    /**
     * Properties of entity ProductMess.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MProductId = new Property(1, int.class, "mProductId", false, "M_PRODUCT_ID");
        public final static Property MProductName = new Property(2, String.class, "mProductName", false, "M_PRODUCT_NAME");
        public final static Property MProductDaysum = new Property(3, String.class, "mProductDaysum", false, "M_PRODUCT_DAYSUM");
        public final static Property MProductTotal = new Property(4, String.class, "mProductTotal", false, "M_PRODUCT_TOTAL");
        public final static Property MImgUrl = new Property(5, String.class, "mImgUrl", false, "M_IMG_URL");
        public final static Property MEquipmenthost = new Property(6, String.class, "mEquipmenthost", false, "M_EQUIPMENTHOST");
        public final static Property MEquipmentbase = new Property(7, String.class, "mEquipmentbase", false, "M_EQUIPMENTBASE");
        public final static Property MPrematchImgurl = new Property(8, String.class, "mPrematchImgurl", false, "M_PREMATCH_IMGURL");
        public final static Property MPrematchProductname = new Property(9, String.class, "mPrematchProductname", false, "M_PREMATCH_PRODUCTNAME");
        public final static Property MProductMess = new Property(10, String.class, "mProductMess", false, "M_PRODUCT_MESS");
        public final static Property MShelfState = new Property(11, String.class, "mShelfState", false, "M_SHELF_STATE");
        public final static Property MLackProduct = new Property(12, String.class, "mLackProduct", false, "M_LACK_PRODUCT");
        public final static Property MTextSpeak = new Property(13, String.class, "mTextSpeak", false, "M_TEXT_SPEAK");
    }


    public ProductMessDao(DaoConfig config) {
        super(config);
    }
    
    public ProductMessDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_MESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"M_PRODUCT_ID\" INTEGER NOT NULL ," + // 1: mProductId
                "\"M_PRODUCT_NAME\" TEXT," + // 2: mProductName
                "\"M_PRODUCT_DAYSUM\" TEXT," + // 3: mProductDaysum
                "\"M_PRODUCT_TOTAL\" TEXT," + // 4: mProductTotal
                "\"M_IMG_URL\" TEXT," + // 5: mImgUrl
                "\"M_EQUIPMENTHOST\" TEXT," + // 6: mEquipmenthost
                "\"M_EQUIPMENTBASE\" TEXT," + // 7: mEquipmentbase
                "\"M_PREMATCH_IMGURL\" TEXT," + // 8: mPrematchImgurl
                "\"M_PREMATCH_PRODUCTNAME\" TEXT," + // 9: mPrematchProductname
                "\"M_PRODUCT_MESS\" TEXT," + // 10: mProductMess
                "\"M_SHELF_STATE\" TEXT," + // 11: mShelfState
                "\"M_LACK_PRODUCT\" TEXT," + // 12: mLackProduct
                "\"M_TEXT_SPEAK\" TEXT);"); // 13: mTextSpeak
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_MESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductMess entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMProductId());
 
        String mProductName = entity.getMProductName();
        if (mProductName != null) {
            stmt.bindString(3, mProductName);
        }
 
        String mProductDaysum = entity.getMProductDaysum();
        if (mProductDaysum != null) {
            stmt.bindString(4, mProductDaysum);
        }
 
        String mProductTotal = entity.getMProductTotal();
        if (mProductTotal != null) {
            stmt.bindString(5, mProductTotal);
        }
 
        String mImgUrl = entity.getMImgUrl();
        if (mImgUrl != null) {
            stmt.bindString(6, mImgUrl);
        }
 
        String mEquipmenthost = entity.getMEquipmenthost();
        if (mEquipmenthost != null) {
            stmt.bindString(7, mEquipmenthost);
        }
 
        String mEquipmentbase = entity.getMEquipmentbase();
        if (mEquipmentbase != null) {
            stmt.bindString(8, mEquipmentbase);
        }
 
        String mPrematchImgurl = entity.getMPrematchImgurl();
        if (mPrematchImgurl != null) {
            stmt.bindString(9, mPrematchImgurl);
        }
 
        String mPrematchProductname = entity.getMPrematchProductname();
        if (mPrematchProductname != null) {
            stmt.bindString(10, mPrematchProductname);
        }
 
        String mProductMess = entity.getMProductMess();
        if (mProductMess != null) {
            stmt.bindString(11, mProductMess);
        }
 
        String mShelfState = entity.getMShelfState();
        if (mShelfState != null) {
            stmt.bindString(12, mShelfState);
        }
 
        String mLackProduct = entity.getMLackProduct();
        if (mLackProduct != null) {
            stmt.bindString(13, mLackProduct);
        }
 
        String mTextSpeak = entity.getMTextSpeak();
        if (mTextSpeak != null) {
            stmt.bindString(14, mTextSpeak);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductMess entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMProductId());
 
        String mProductName = entity.getMProductName();
        if (mProductName != null) {
            stmt.bindString(3, mProductName);
        }
 
        String mProductDaysum = entity.getMProductDaysum();
        if (mProductDaysum != null) {
            stmt.bindString(4, mProductDaysum);
        }
 
        String mProductTotal = entity.getMProductTotal();
        if (mProductTotal != null) {
            stmt.bindString(5, mProductTotal);
        }
 
        String mImgUrl = entity.getMImgUrl();
        if (mImgUrl != null) {
            stmt.bindString(6, mImgUrl);
        }
 
        String mEquipmenthost = entity.getMEquipmenthost();
        if (mEquipmenthost != null) {
            stmt.bindString(7, mEquipmenthost);
        }
 
        String mEquipmentbase = entity.getMEquipmentbase();
        if (mEquipmentbase != null) {
            stmt.bindString(8, mEquipmentbase);
        }
 
        String mPrematchImgurl = entity.getMPrematchImgurl();
        if (mPrematchImgurl != null) {
            stmt.bindString(9, mPrematchImgurl);
        }
 
        String mPrematchProductname = entity.getMPrematchProductname();
        if (mPrematchProductname != null) {
            stmt.bindString(10, mPrematchProductname);
        }
 
        String mProductMess = entity.getMProductMess();
        if (mProductMess != null) {
            stmt.bindString(11, mProductMess);
        }
 
        String mShelfState = entity.getMShelfState();
        if (mShelfState != null) {
            stmt.bindString(12, mShelfState);
        }
 
        String mLackProduct = entity.getMLackProduct();
        if (mLackProduct != null) {
            stmt.bindString(13, mLackProduct);
        }
 
        String mTextSpeak = entity.getMTextSpeak();
        if (mTextSpeak != null) {
            stmt.bindString(14, mTextSpeak);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProductMess readEntity(Cursor cursor, int offset) {
        ProductMess entity = new ProductMess( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // mProductId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mProductName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mProductDaysum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mProductTotal
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mImgUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mEquipmenthost
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mEquipmentbase
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mPrematchImgurl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // mPrematchProductname
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // mProductMess
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // mShelfState
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // mLackProduct
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // mTextSpeak
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductMess entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMProductId(cursor.getInt(offset + 1));
        entity.setMProductName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMProductDaysum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMProductTotal(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMImgUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMEquipmenthost(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMEquipmentbase(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMPrematchImgurl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMPrematchProductname(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMProductMess(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMShelfState(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMLackProduct(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMTextSpeak(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProductMess entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProductMess entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProductMess entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
