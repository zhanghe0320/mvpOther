package com.mvp.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYSTEM_VALUES".
*/
public class SystemValuesDao extends AbstractDao<SystemValues, Long> {

    public static final String TABLENAME = "SYSTEM_VALUES";

    /**
     * Properties of entity SystemValues.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MValueNeme = new Property(0, String.class, "mValueNeme", false, "M_VALUE_NEME");
        public final static Property MValueMess = new Property(1, String.class, "mValueMess", false, "M_VALUE_MESS");
        public final static Property MTimeCreate = new Property(2, Long.class, "mTimeCreate", false, "M_TIME_CREATE");
        public final static Property Id = new Property(3, Long.class, "id", true, "_id");
    }


    public SystemValuesDao(DaoConfig config) {
        super(config);
    }
    
    public SystemValuesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYSTEM_VALUES\" (" + //
                "\"M_VALUE_NEME\" TEXT NOT NULL ," + // 0: mValueNeme
                "\"M_VALUE_MESS\" TEXT NOT NULL ," + // 1: mValueMess
                "\"M_TIME_CREATE\" INTEGER," + // 2: mTimeCreate
                "\"_id\" INTEGER PRIMARY KEY );"); // 3: id
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_SYSTEM_VALUES_M_VALUE_NEME ON \"SYSTEM_VALUES\"" +
                " (\"M_VALUE_NEME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYSTEM_VALUES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SystemValues entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getMValueNeme());
        stmt.bindString(2, entity.getMValueMess());
 
        Long mTimeCreate = entity.getMTimeCreate();
        if (mTimeCreate != null) {
            stmt.bindLong(3, mTimeCreate);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SystemValues entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getMValueNeme());
        stmt.bindString(2, entity.getMValueMess());
 
        Long mTimeCreate = entity.getMTimeCreate();
        if (mTimeCreate != null) {
            stmt.bindLong(3, mTimeCreate);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    @Override
    public SystemValues readEntity(Cursor cursor, int offset) {
        SystemValues entity = new SystemValues( //
            cursor.getString(offset + 0), // mValueNeme
            cursor.getString(offset + 1), // mValueMess
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // mTimeCreate
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SystemValues entity, int offset) {
        entity.setMValueNeme(cursor.getString(offset + 0));
        entity.setMValueMess(cursor.getString(offset + 1));
        entity.setMTimeCreate(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SystemValues entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SystemValues entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SystemValues entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
